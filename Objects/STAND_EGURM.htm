<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\STAND_EGURM.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\STAND_EGURM.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Tue Aug 29 09:30:33 2023
<BR><P>
<H3>Maximum Stack Usage =        160 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
SysTick_Handler &rArr; Period1ms &rArr; Period1MsForAkip &rArr; SetParametr &rArr; SetCurrentAkip &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[33]">ADC0_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33]">ADC0_1_IRQHandler</a><BR>
 <LI><a href="#[1b]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">BusFault_Handler</a><BR>
 <LI><a href="#[19]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">HardFault_Handler</a><BR>
 <LI><a href="#[1a]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">MemManage_Handler</a><BR>
 <LI><a href="#[1c]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[33]">ADC0_1_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[50]">ADC2_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[1b]">BusFault_Handler</a> from gd32e50x_it.o(.text.BusFault_Handler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[37]">CAN0_EWMC_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[36]">CAN0_RX1_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[60]">CAN1_EWMC_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[5e]">CAN1_RX0_IRQHandler</a> from gd32e50x_it.o(.text.CAN1_RX0_IRQHandler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[5f]">CAN1_RX1_IRQHandler</a> from gd32e50x_it.o(.text.CAN1_RX1_IRQHandler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[5d]">CAN1_TX_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[2c]">DMA0_Channel0_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[2d]">DMA0_Channel1_IRQHandler</a> from gd32e50x_it.o(.text.DMA0_Channel1_IRQHandler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[2e]">DMA0_Channel2_IRQHandler</a> from gd32e50x_it.o(.text.DMA0_Channel2_IRQHandler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[2f]">DMA0_Channel3_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[30]">DMA0_Channel4_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[31]">DMA0_Channel5_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[32]">DMA0_Channel6_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[59]">DMA1_Channel0_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[5a]">DMA1_Channel1_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[5b]">DMA1_Channel2_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[5c]">DMA1_Channel3_4_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[1e]">DebugMon_Handler</a> from gd32e50x_it.o(.text.DebugMon_Handler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[51]">EXMC_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[27]">EXTI0_IRQHandler</a> from gd32e50x_it.o(.text.EXTI0_IRQHandler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[49]">EXTI10_15_IRQHandler</a> from gd32e50x_it.o(.text.EXTI10_15_IRQHandler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[28]">EXTI1_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[29]">EXTI2_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[2a]">EXTI3_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[2b]">EXTI4_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[38]">EXTI5_9_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[25]">FMC_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[71]">GetAkipTxBuff</a> from usart_akip_1148a.o(.text.GetAkipTxBuff) referenced 2 times from usart_akip_1148a_init.o(.text.UsartAkip1148aInit)
 <LI><a href="#[19]">HardFault_Handler</a> from gd32e50x_it.o(.text.HardFault_Handler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[41]">I2C0_ER_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[40]">I2C0_EV_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[43]">I2C1_ER_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[42]">I2C1_EV_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[69]">I2C2_ER_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[68]">I2C2_EV_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[6b]">I2C2_WKUP_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[22]">LVD_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[1a]">MemManage_Handler</a> from gd32e50x_it.o(.text.MemManage_Handler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[18]">NMI_Handler</a> from gd32e50x_it.o(.text.NMI_Handler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[1f]">PendSV_Handler</a> from gd32e50x_it.o(.text.PendSV_Handler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[26]">RCU_CTC_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[4a]">RTC_Alarm_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[24]">RTC_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[17]">Reset_Handler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[52]">SDIO_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[66]">SHRTIMER_IRQ0_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[67]">SHRTIMER_IRQ1_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[61]">SHRTIMER_IRQ2_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[62]">SHRTIMER_IRQ3_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[63]">SHRTIMER_IRQ4_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[64]">SHRTIMER_IRQ5_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[65]">SHRTIMER_IRQ6_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[44]">SPI0_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[45]">SPI1_I2S1ADD_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[54]">SPI2_I2S2ADD_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[1d]">SVC_Handler</a> from gd32e50x_it.o(.text.SVC_Handler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[20]">SysTick_Handler</a> from gd32e50x_it.o(.text.SysTick_Handler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[6d]">SystemInit</a> from system_gd32e50x.o(.text.SystemInit) referenced from startup_gd32e50x_hd.o(.text)
 <LI><a href="#[23]">TAMPER_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[39]">TIMER0_BRK_TIMER8_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[3c]">TIMER0_Channel_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[3b]">TIMER0_TRG_CMT_TIMER10_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[3a]">TIMER0_UP_TIMER9_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[3d]">TIMER1_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[3e]">TIMER2_IRQHandler</a> from encoder_egurm.o(.text.TIMER2_IRQHandler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[3f]">TIMER3_IRQHandler</a> from encoder_egurm.o(.text.TIMER3_IRQHandler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[53]">TIMER4_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[57]">TIMER5_DAC_IRQHandler</a> from gd32e50x_it.o(.text.TIMER5_DAC_IRQHandler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[58]">TIMER6_IRQHandler</a> from gd32e50x_it.o(.text.TIMER6_IRQHandler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[4c]">TIMER7_BRK_TIMER11_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[4f]">TIMER7_Channel_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[4e]">TIMER7_TRG_CMT_TIMER13_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[4d]">TIMER7_UP_TIMER12_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[55]">UART3_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[56]">UART4_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[46]">USART0_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[47]">USART1_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[48]">USART2_IRQHandler</a> from usart_akip_1148a.o(.text.USART2_IRQHandler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[6a]">USART5_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[6c]">USART5_WKUP_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[34]">USBD_HP_CAN0_TX_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[35]">USBD_LP_CAN0_RX0_IRQHandler</a> from gd32e50x_it.o(.text.USBD_LP_CAN0_RX0_IRQHandler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[4b]">USBD_WKUP_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[1c]">UsageFault_Handler</a> from gd32e50x_it.o(.text.UsageFault_Handler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[21]">WWDGT_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[6e]">__main</a> from __main.o(!!!main) referenced from startup_gd32e50x_hd.o(.text)
 <LI><a href="#[70]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[6f]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[74]">_usb_in0_transc</a> from usbd_transc.o(.text._usb_in0_transc) referenced 2 times from usbd_core.o(.text.usbd_init)
 <LI><a href="#[73]">_usb_out0_transc</a> from usbd_transc.o(.text._usb_out0_transc) referenced 2 times from usbd_core.o(.text.usbd_init)
 <LI><a href="#[72]">_usb_setup_transc</a> from usbd_transc.o(.text._usb_setup_transc) referenced 2 times from usbd_core.o(.text.usbd_init)
 <LI><a href="#[76]">_usb_std_clearfeature</a> from usbd_enum.o(.text._usb_std_clearfeature) referenced from usbd_enum.o(.text.usbd_standard_request)
 <LI><a href="#[7c]">_usb_std_getconfiguration</a> from usbd_enum.o(.text._usb_std_getconfiguration) referenced from usbd_enum.o(.text.usbd_standard_request)
 <LI><a href="#[7a]">_usb_std_getdescriptor</a> from usbd_enum.o(.text._usb_std_getdescriptor) referenced from usbd_enum.o(.text.usbd_standard_request)
 <LI><a href="#[7e]">_usb_std_getinterface</a> from usbd_enum.o(.text._usb_std_getinterface) referenced from usbd_enum.o(.text.usbd_standard_request)
 <LI><a href="#[75]">_usb_std_getstatus</a> from usbd_enum.o(.text._usb_std_getstatus) referenced from usbd_enum.o(.text.usbd_standard_request)
 <LI><a href="#[77]">_usb_std_reserved</a> from usbd_enum.o(.text._usb_std_reserved) referenced 2 times from usbd_enum.o(.text.usbd_standard_request)
 <LI><a href="#[79]">_usb_std_setaddress</a> from usbd_enum.o(.text._usb_std_setaddress) referenced from usbd_enum.o(.text.usbd_standard_request)
 <LI><a href="#[7d]">_usb_std_setconfiguration</a> from usbd_enum.o(.text._usb_std_setconfiguration) referenced from usbd_enum.o(.text.usbd_standard_request)
 <LI><a href="#[7b]">_usb_std_setdescriptor</a> from usbd_enum.o(.text._usb_std_setdescriptor) referenced from usbd_enum.o(.text.usbd_standard_request)
 <LI><a href="#[78]">_usb_std_setfeature</a> from usbd_enum.o(.text._usb_std_setfeature) referenced from usbd_enum.o(.text.usbd_standard_request)
 <LI><a href="#[7f]">_usb_std_setinterface</a> from usbd_enum.o(.text._usb_std_setinterface) referenced from usbd_enum.o(.text.usbd_standard_request)
 <LI><a href="#[80]">_usb_std_synchframe</a> from usbd_enum.o(.text._usb_std_synchframe) referenced from usbd_enum.o(.text.usbd_standard_request)
 <LI><a href="#[3]">custom_hid_data_in</a> from custom_hid_core.o(.text.custom_hid_data_in) referenced 2 times from custom_hid_core.o(.data.custom_hid_class)
 <LI><a href="#[4]">custom_hid_data_out</a> from custom_hid_core.o(.text.custom_hid_data_out) referenced 2 times from custom_hid_core.o(.data.custom_hid_class)
 <LI><a href="#[1]">custom_hid_deinit</a> from custom_hid_core.o(.text.custom_hid_deinit) referenced 2 times from custom_hid_core.o(.data.custom_hid_class)
 <LI><a href="#[0]">custom_hid_init</a> from custom_hid_core.o(.text.custom_hid_init) referenced 2 times from custom_hid_core.o(.data.custom_hid_class)
 <LI><a href="#[2]">custom_hid_req_handler</a> from custom_hid_core.o(.text.custom_hid_req_handler) referenced 2 times from custom_hid_core.o(.data.custom_hid_class)
 <LI><a href="#[5]">key_config</a> from custom_hid_itf.o(.text.key_config) referenced 2 times from custom_hid_itf.o(.data.fop_handler)
 <LI><a href="#[6]">led_config</a> from custom_hid_itf.o(.text.led_config) referenced 2 times from custom_hid_itf.o(.data.fop_handler)
 <LI><a href="#[a]">usbd_address_set</a> from usbd_lld_core.o(.text.usbd_address_set) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[7]">usbd_core_reset</a> from usbd_lld_core.o(.text.usbd_core_reset) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[8]">usbd_core_stop</a> from usbd_lld_core.o(.text.usbd_core_stop) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[9]">usbd_dp_pullup</a> from usbd_lld_core.o(.text.usbd_dp_pullup) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[13]">usbd_ep_data_read</a> from usbd_lld_core.o(.text.usbd_ep_data_read) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[12]">usbd_ep_data_write</a> from usbd_lld_core.o(.text.usbd_ep_data_write) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[10]">usbd_ep_disable</a> from usbd_lld_core.o(.text.usbd_ep_disable) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[e]">usbd_ep_reset</a> from usbd_lld_core.o(.text.usbd_ep_reset) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[11]">usbd_ep_rx_enable</a> from usbd_lld_core.o(.text.usbd_ep_rx_enable) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[f]">usbd_ep_setup</a> from usbd_lld_core.o(.text.usbd_ep_setup) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[15]">usbd_ep_stall_clear</a> from usbd_lld_core.o(.text.usbd_ep_stall_clear) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[14]">usbd_ep_stall_set</a> from usbd_lld_core.o(.text.usbd_ep_stall_set) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[16]">usbd_ep_status</a> from usbd_lld_core.o(.text.usbd_ep_status) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[c]">usbd_leave_suspend</a> from usbd_lld_core.o(.text.usbd_leave_suspend) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[d]">usbd_resume</a> from usbd_lld_core.o(.text.usbd_resume) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[b]">usbd_suspend</a> from usbd_lld_core.o(.text.usbd_suspend) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6e]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(.text)
</UL>
<P><STRONG><a name="[81]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[83]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[11d]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[11e]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[11f]"></a>__decompress</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[120]"></a>__decompress0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[121]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[84]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[96]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[122]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[8b]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[86]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[123]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[124]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[125]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[126]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[127]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[128]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[129]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[12a]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[12b]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[12c]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[12d]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[12e]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[12f]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[130]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[131]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[132]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[133]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[134]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[135]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[136]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[137]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[90]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[138]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[139]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[13a]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[13b]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[13c]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[13d]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[13e]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[82]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[13f]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[88]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[8a]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[140]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[8c]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; SetCurrentEgurm &rArr; SetParametr &rArr; SetCurrentAkip &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[141]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[9a]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[8f]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[142]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[91]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[17]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>ADC0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>ADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>CAN1_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA1_Channel3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>I2C2_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>RCU_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>SHRTIMER_IRQ0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>SHRTIMER_IRQ1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SHRTIMER_IRQ2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>SHRTIMER_IRQ3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SHRTIMER_IRQ4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SHRTIMER_IRQ5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>SHRTIMER_IRQ6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SPI1_I2S1ADD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>SPI2_I2S2ADD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIMER0_BRK_TIMER8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIMER0_TRG_CMT_TIMER10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIMER0_UP_TIMER9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIMER7_BRK_TIMER11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIMER7_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIMER7_TRG_CMT_TIMER13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIMER7_UP_TIMER12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>USART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>USART5_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBD_HP_CAN0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>USBD_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[93]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrentAkip
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVoltageAkip
</UL>

<P><STRONG><a name="[95]"></a>__printf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[85]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[143]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[94]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[6f]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[89]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[8e]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[146]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[147]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[148]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>AdcConfig</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, adc_init_egurm.o(.text.AdcConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AdcConfig &rArr; adc_regular_channel_config
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_software_trigger_enable
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_enable
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_dma_mode_enable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_config
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_source_config
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_regular_channel_config
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_length_config
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_data_alignment_config
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_special_function_config
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_mode_config
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcEgurnInit
</UL>

<P><STRONG><a name="[a8]"></a>AdcEgurnInit</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, adc_init_egurm.o(.text.AdcEgurnInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AdcEgurnInit &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcConfig
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_enable
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_adc_clock_config
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDefaultSenseMoment
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pGetAdcValue
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>AverageValueAdcMoment</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, adc_egurm.o(.text.AverageValueAdcMoment))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AverageValueAdcMoment
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period10us
</UL>

<P><STRONG><a name="[e0]"></a>AverageValueAdcVoltAmper</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, adc_egurm.o(.text.AverageValueAdcVoltAmper))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AverageValueAdcVoltAmper
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period100us
</UL>

<P><STRONG><a name="[1b]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e50x_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gd32e50x_it.o(.text.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; can_message_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gd32e50x_it.o(.text.CAN1_RX1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN1_RX1_IRQHandler &rArr; can_message_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>CanConfig</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, can_init_egurm.o(.text.CanConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CanConfig &rArr; can_filter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_enable
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_struct_para_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>CanEgurmInit</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, can_init_egurm.o(.text.CanEgurmInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CanEgurmInit &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_enable
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_struct_para_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pGetReceiveMessage
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pGetTransmitMessage
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>CanTransmit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, can_egurm.o(.text.CanTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CanTransmit &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gd32e50x_it.o(.text.DMA0_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA0_Channel1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_clear
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, gd32e50x_it.o(.text.DMA0_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA0_Channel2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_number_config
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_clear
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_clear
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e50x_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e50x_it.o(.text.EXTI0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e50x_it.o(.text.EXTI10_15_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>EncoderInInit</STRONG> (Thumb, 442 bytes, Stack size 56 bytes, encoder_init_egurm.o(.text.EncoderInInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EncoderInInit &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_slave_mode_select
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_input_trigger_source_select
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_input_capture_config
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_quadrature_decoder_mode_config
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_struct_para_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>GetAkipTxBuff</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usart_akip_1148a.o(.text.GetAkipTxBuff))
<BR>[Address Reference Count : 1]<UL><LI> usart_akip_1148a_init.o(.text.UsartAkip1148aInit)
</UL>
<P><STRONG><a name="[118]"></a>GetCurrent</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, adc_egurm.o(.text.GetCurrent))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115]"></a>GetMomentIn</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, adc_egurm.o(.text.GetMomentIn))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[116]"></a>GetMomentOut</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, adc_egurm.o(.text.GetMomentOut))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d0]"></a>GetObsalutAngleEncoderIn</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, encoder_egurm.o(.text.GetObsalutAngleEncoderIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetObsalutAngleEncoderIn
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_counter_read
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[119]"></a>GetTemperature</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, adc_egurm.o(.text.GetTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetTemperature
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[117]"></a>GetVoltage</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, adc_egurm.o(.text.GetVoltage))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e50x_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d2]"></a>IngitionInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ingition.o(.text.IngitionInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IngitionInit &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d4]"></a>IngitionOff</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ingition.o(.text.IngitionOff))
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d5]"></a>IngitionOn</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ingition.o(.text.IngitionOn))
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d7]"></a>InitTimerTo100us</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, timers_10_and_100_us_init.o(.text.InitTimerTo100us))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = InitTimerTo100us &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_struct_para_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>InitTimerTo10us</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, timers_10_and_100_us_init.o(.text.InitTimerTo10us))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = InitTimerTo10us &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_struct_para_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e50x_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d9]"></a>MuftaEgurmInit</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, mufta_egurm_init.o(.text.MuftaEgurmInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MuftaEgurmInit &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_enable
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_shadow_config
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_mode_config
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_config
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e50x_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e50x_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[df]"></a>Period100us</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timers_10_and_100_us.o(.text.Period100us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Period100us &rArr; AverageValueAdcVoltAmper
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AverageValueAdcVoltAmper
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER6_IRQHandler
</UL>

<P><STRONG><a name="[e1]"></a>Period10us</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timers_10_and_100_us.o(.text.Period10us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Period10us &rArr; AverageValueAdcMoment
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AverageValueAdcMoment
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5_DAC_IRQHandler
</UL>

<P><STRONG><a name="[e3]"></a>Period1MsForAkip</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usart_akip_1148a.o(.text.Period1MsForAkip))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Period1MsForAkip &rArr; SetParametr &rArr; SetCurrentAkip &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParametr
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period1ms
</UL>

<P><STRONG><a name="[e5]"></a>Period1ms</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timers_10_and_100_us.o(.text.Period1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Period1ms &rArr; Period1MsForAkip &rArr; SetParametr &rArr; SetCurrentAkip &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period1MsForAkip
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1d]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e50x_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e6]"></a>SetCurrentAkip</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, usart_akip_1148a.o(.text.SetCurrentAkip))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = SetCurrentAkip &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_transmit_config
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_address_config
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_number_config
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParametr
</UL>

<P><STRONG><a name="[e9]"></a>SetCurrentEgurm</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, usart_akip_1148a.o(.text.SetCurrentEgurm))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = SetCurrentEgurm &rArr; SetParametr &rArr; SetCurrentAkip &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParametr
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b1]"></a>SetDefaultSenseMoment</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, adc_egurm.o(.text.SetDefaultSenseMoment))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcEgurnInit
</UL>

<P><STRONG><a name="[e4]"></a>SetParametr</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, usart_akip_1148a.o(.text.SetParametr))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = SetParametr &rArr; SetCurrentAkip &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrentAkip
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVoltageAkip
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_transmit_config
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_address_config
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_number_config
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period1MsForAkip
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrentEgurm
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVoltageEgurm
</UL>

<P><STRONG><a name="[eb]"></a>SetPwmMufta</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mufta_egurm.o(.text.SetPwmMufta))
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ea]"></a>SetVoltageAkip</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, usart_akip_1148a.o(.text.SetVoltageAkip))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = SetVoltageAkip &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_transmit_config
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_address_config
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_number_config
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParametr
</UL>

<P><STRONG><a name="[ec]"></a>SetVoltageEgurm</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, usart_akip_1148a.o(.text.SetVoltageEgurm))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = SetVoltageEgurm &rArr; SetParametr &rArr; SetCurrentAkip &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParametr
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gd32e50x_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; Period1ms &rArr; Period1MsForAkip &rArr; SetParametr &rArr; SetCurrentAkip &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period1ms
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_decrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>SystemInit</STRONG> (Thumb, 456 bytes, Stack size 4 bytes, system_gd32e50x.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(.text)
</UL>
<P><STRONG><a name="[3e]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, encoder_egurm.o(.text.TIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, encoder_egurm.o(.text.TIMER3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TIMER5_DAC_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gd32e50x_it.o(.text.TIMER5_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER5_DAC_IRQHandler &rArr; Period10us &rArr; AverageValueAdcMoment
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period10us
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gd32e50x_it.o(.text.TIMER6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER6_IRQHandler &rArr; Period100us &rArr; AverageValueAdcVoltAmper
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period100us
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>USART2_IRQHandler</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, usart_akip_1148a.o(.text.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_address_config
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USBD_LP_CAN0_RX0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e50x_it.o(.text.USBD_LP_CAN0_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_LP_CAN0_RX0_IRQHandler &rArr; usbd_isr &rArr; usbd_ep_send
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e50x_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f3]"></a>UsartAkip1148aInit</STRONG> (Thumb, 354 bytes, Stack size 64 bytes, usart_akip_1148a_init.o(.text.UsartAkip1148aInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UsartAkip1148aInit &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_receive_config
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_enable
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_to_memory_disable
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_disable
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_struct_para_init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ff]"></a>UsbdActive</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usbd_egurm.o(.text.UsbdActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UsbdActive &rArr; usbd_init &rArr; serial_string_get
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[114]"></a>UsbdDisactive</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_egurm.o(.text.UsbdDisactive))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>UsbdEgurmInit</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, usbd_egurm.o(.text.UsbdEgurmInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UsbdEgurmInit &rArr; usb_gpio_config &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_config
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_hid_itfop_register
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_gpio_config
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_config
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>VoltageReversInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, voltage_revers.o(.text.VoltageReversInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VoltageReversInit &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>_usb_in0_transc</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, usbd_transc.o(.text._usb_in0_transc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _usb_in0_transc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.text.usbd_init)
</UL>
<P><STRONG><a name="[73]"></a>_usb_out0_transc</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, usbd_transc.o(.text._usb_out0_transc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _usb_out0_transc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.text.usbd_init)
</UL>
<P><STRONG><a name="[72]"></a>_usb_setup_transc</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, usbd_transc.o(.text._usb_setup_transc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _usb_setup_transc &rArr; usbd_ep_send
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_vendor_request
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_class_request
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_standard_request
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.text.usbd_init)
</UL>
<P><STRONG><a name="[a6]"></a>adc_calibration_enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32e50x_adc.o(.text.adc_calibration_enable))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcConfig
</UL>

<P><STRONG><a name="[9f]"></a>adc_channel_length_config</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gd32e50x_adc.o(.text.adc_channel_length_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_channel_length_config
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcConfig
</UL>

<P><STRONG><a name="[9e]"></a>adc_data_alignment_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e50x_adc.o(.text.adc_data_alignment_config))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcConfig
</UL>

<P><STRONG><a name="[a3]"></a>adc_dma_mode_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e50x_adc.o(.text.adc_dma_mode_enable))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcConfig
</UL>

<P><STRONG><a name="[a4]"></a>adc_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e50x_adc.o(.text.adc_enable))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcConfig
</UL>

<P><STRONG><a name="[a2]"></a>adc_external_trigger_config</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, gd32e50x_adc.o(.text.adc_external_trigger_config))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcConfig
</UL>

<P><STRONG><a name="[a1]"></a>adc_external_trigger_source_config</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gd32e50x_adc.o(.text.adc_external_trigger_source_config))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcConfig
</UL>

<P><STRONG><a name="[9c]"></a>adc_mode_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32e50x_adc.o(.text.adc_mode_config))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcConfig
</UL>

<P><STRONG><a name="[a0]"></a>adc_regular_channel_config</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, gd32e50x_adc.o(.text.adc_regular_channel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_regular_channel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcConfig
</UL>

<P><STRONG><a name="[a7]"></a>adc_software_trigger_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32e50x_adc.o(.text.adc_software_trigger_enable))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcConfig
</UL>

<P><STRONG><a name="[9d]"></a>adc_special_function_config</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, gd32e50x_adc.o(.text.adc_special_function_config))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcConfig
</UL>

<P><STRONG><a name="[b5]"></a>can_deinit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gd32e50x_can.o(.text.can_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanEgurmInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanConfig
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>can_filter_init</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, gd32e50x_can.o(.text.can_filter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_filter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanEgurmInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanConfig
</UL>

<P><STRONG><a name="[b6]"></a>can_init</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, gd32e50x_can.o(.text.can_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanEgurmInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanConfig
</UL>

<P><STRONG><a name="[b9]"></a>can_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32e50x_can.o(.text.can_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanEgurmInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanConfig
</UL>

<P><STRONG><a name="[b2]"></a>can_message_receive</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, gd32e50x_can.o(.text.can_message_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_message_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>can_message_transmit</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, gd32e50x_can.o(.text.can_message_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_message_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTransmit
</UL>

<P><STRONG><a name="[b4]"></a>can_struct_para_init</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, gd32e50x_can.o(.text.can_struct_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanEgurmInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanConfig
</UL>

<P><STRONG><a name="[104]"></a>custom_hid_itfop_register</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, custom_hid_core.o(.text.custom_hid_itfop_register))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbdEgurmInit
</UL>

<P><STRONG><a name="[10e]"></a>custom_hid_report_send</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, custom_hid_core.o(.text.custom_hid_report_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = custom_hid_report_send &rArr; usbd_ep_send
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_send
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbSend
</UL>

<P><STRONG><a name="[a5]"></a>delay_1ms</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, systick.o(.text.delay_1ms))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcConfig
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcEgurnInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>delay_decrement</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, systick.o(.text.delay_decrement))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[c2]"></a>dma_channel_disable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gd32e50x_dma.o(.text.dma_channel_disable))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrentAkip
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVoltageAkip
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParametr
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[b0]"></a>dma_channel_enable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gd32e50x_dma.o(.text.dma_channel_enable))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrentAkip
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVoltageAkip
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParametr
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartAkip1148aInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcEgurnInit
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[fa]"></a>dma_circulation_disable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gd32e50x_dma.o(.text.dma_circulation_disable))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartAkip1148aInit
</UL>

<P><STRONG><a name="[af]"></a>dma_circulation_enable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gd32e50x_dma.o(.text.dma_circulation_enable))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcEgurnInit
</UL>

<P><STRONG><a name="[ac]"></a>dma_deinit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, gd32e50x_dma.o(.text.dma_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartAkip1148aInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcEgurnInit
</UL>

<P><STRONG><a name="[c1]"></a>dma_flag_clear</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32e50x_dma.o(.text.dma_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[ae]"></a>dma_init</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, gd32e50x_dma.o(.text.dma_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartAkip1148aInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcEgurnInit
</UL>

<P><STRONG><a name="[fc]"></a>dma_interrupt_enable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gd32e50x_dma.o(.text.dma_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartAkip1148aInit
</UL>

<P><STRONG><a name="[c0]"></a>dma_interrupt_flag_clear</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32e50x_dma.o(.text.dma_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel2_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[bf]"></a>dma_interrupt_flag_get</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, gd32e50x_dma.o(.text.dma_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel2_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[e7]"></a>dma_memory_address_config</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32e50x_dma.o(.text.dma_memory_address_config))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrentAkip
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVoltageAkip
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParametr
</UL>

<P><STRONG><a name="[fb]"></a>dma_memory_to_memory_disable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gd32e50x_dma.o(.text.dma_memory_to_memory_disable))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartAkip1148aInit
</UL>

<P><STRONG><a name="[f9]"></a>dma_struct_para_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32e50x_dma.o(.text.dma_struct_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartAkip1148aInit
</UL>

<P><STRONG><a name="[c3]"></a>dma_transfer_number_config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32e50x_dma.o(.text.dma_transfer_number_config))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrentAkip
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVoltageAkip
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParametr
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[d3]"></a>gpio_bit_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e50x_gpio.o(.text.gpio_bit_reset))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IngitionOff
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IngitionInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltageReversInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dp_pullup
</UL>

<P><STRONG><a name="[d6]"></a>gpio_bit_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e50x_gpio.o(.text.gpio_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IngitionOn
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dp_pullup
</UL>

<P><STRONG><a name="[ab]"></a>gpio_init</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, gd32e50x_gpio.o(.text.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_gpio_config
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanEgurmInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IngitionInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltageReversInit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuftaEgurmInit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderInInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartAkip1148aInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcEgurnInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c5]"></a>gpio_pin_remap_config</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, gd32e50x_gpio.o(.text.gpio_pin_remap_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_pin_remap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderInInit
</UL>

<P><STRONG><a name="[111]"></a>gpio_port_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e50x_gpio.o(.text.gpio_port_write))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>main</STRONG> (Thumb, 492 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = main &rArr; SetCurrentEgurm &rArr; SetParametr &rArr; SetCurrentAkip &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IngitionOn
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPwmMufta
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetObsalutAngleEncoderIn
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTemperature
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrent
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVoltage
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMomentOut
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMomentIn
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanEgurmInit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbdDisactive
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbdActive
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_disable
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrentEgurm
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVoltageEgurm
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTransmit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanConfig
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbSend
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_port_write
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IngitionOff
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IngitionInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltageReversInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbdEgurmInit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuftaEgurmInit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderInInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartAkip1148aInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcEgurnInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimerTo100us
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimerTo10us
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[105]"></a>nvic_config</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gd32e50x_usbd_hw.o(.text.nvic_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nvic_config
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbdEgurmInit
</UL>

<P><STRONG><a name="[b8]"></a>nvic_irq_enable</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, gd32e50x_misc.o(.text.nvic_irq_enable))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_config
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanEgurmInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanConfig
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderInInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartAkip1148aInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimerTo100us
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimerTo10us
</UL>

<P><STRONG><a name="[11a]"></a>nvic_priority_group_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32e50x_misc.o(.text.nvic_priority_group_set))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_config
</UL>

<P><STRONG><a name="[ee]"></a>nvic_vector_table_set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32e50x_misc.o(.text.nvic_vector_table_set))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[ad]"></a>pGetAdcValue</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adc_egurm.o(.text.pGetAdcValue))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcEgurnInit
</UL>

<P><STRONG><a name="[bc]"></a>pGetReceiveMessage</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, can_egurm.o(.text.pGetReceiveMessage))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanEgurmInit
</UL>

<P><STRONG><a name="[bb]"></a>pGetTransmitMessage</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, can_egurm.o(.text.pGetTransmitMessage))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanEgurmInit
</UL>

<P><STRONG><a name="[aa]"></a>rcu_adc_clock_config</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, gd32e50x_rcu.o(.text.rcu_adc_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcu_adc_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcEgurnInit
</UL>

<P><STRONG><a name="[110]"></a>rcu_clock_freq_get</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, gd32e50x_rcu.o(.text.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_config
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[102]"></a>rcu_config</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, gd32e50x_usbd_hw.o(.text.rcu_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rcu_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_usb_clock_config
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbdEgurmInit
</UL>

<P><STRONG><a name="[113]"></a>rcu_periph_clock_disable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32e50x_rcu.o(.text.rcu_periph_clock_disable))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32e50x_rcu.o(.text.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_config
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanEgurmInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IngitionInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltageReversInit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuftaEgurmInit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderInInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartAkip1148aInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcEgurnInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimerTo100us
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimerTo10us
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10c]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32e50x_rcu.o(.text.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
</UL>

<P><STRONG><a name="[10b]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32e50x_rcu.o(.text.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
</UL>

<P><STRONG><a name="[11b]"></a>rcu_usb_clock_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32e50x_rcu.o(.text.rcu_usb_clock_config))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_config
</UL>

<P><STRONG><a name="[11c]"></a>serial_string_get</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, usbd_enum.o(.text.serial_string_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = serial_string_get
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[10f]"></a>systick_config</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, systick.o(.text.systick_config))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>timer_auto_reload_shadow_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e50x_timer.o(.text.timer_auto_reload_shadow_enable))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuftaEgurmInit
</UL>

<P><STRONG><a name="[da]"></a>timer_channel_output_config</STRONG> (Thumb, 518 bytes, Stack size 0 bytes, gd32e50x_timer.o(.text.timer_channel_output_config))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuftaEgurmInit
</UL>

<P><STRONG><a name="[dc]"></a>timer_channel_output_mode_config</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, gd32e50x_timer.o(.text.timer_channel_output_mode_config))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuftaEgurmInit
</UL>

<P><STRONG><a name="[db]"></a>timer_channel_output_pulse_value_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32e50x_timer.o(.text.timer_channel_output_pulse_value_config))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPwmMufta
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuftaEgurmInit
</UL>

<P><STRONG><a name="[dd]"></a>timer_channel_output_shadow_config</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, gd32e50x_timer.o(.text.timer_channel_output_shadow_config))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuftaEgurmInit
</UL>

<P><STRONG><a name="[d1]"></a>timer_counter_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e50x_timer.o(.text.timer_counter_read))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetObsalutAngleEncoderIn
</UL>

<P><STRONG><a name="[c6]"></a>timer_deinit</STRONG> (Thumb, 328 bytes, Stack size 8 bytes, gd32e50x_timer.o(.text.timer_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuftaEgurmInit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderInInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimerTo100us
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimerTo10us
</UL>

<P><STRONG><a name="[cb]"></a>timer_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32e50x_timer.o(.text.timer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuftaEgurmInit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderInInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimerTo100us
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimerTo10us
</UL>

<P><STRONG><a name="[c7]"></a>timer_init</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, gd32e50x_timer.o(.text.timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuftaEgurmInit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderInInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimerTo100us
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimerTo10us
</UL>

<P><STRONG><a name="[cd]"></a>timer_input_capture_config</STRONG> (Thumb, 346 bytes, Stack size 20 bytes, gd32e50x_timer.o(.text.timer_input_capture_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = timer_input_capture_config
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderInInit
</UL>

<P><STRONG><a name="[ce]"></a>timer_input_trigger_source_select</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e50x_timer.o(.text.timer_input_trigger_source_select))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderInInit
</UL>

<P><STRONG><a name="[ca]"></a>timer_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32e50x_timer.o(.text.timer_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderInInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimerTo100us
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimerTo10us
</UL>

<P><STRONG><a name="[c9]"></a>timer_interrupt_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32e50x_timer.o(.text.timer_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderInInit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER6_IRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5_DAC_IRQHandler
</UL>

<P><STRONG><a name="[ef]"></a>timer_interrupt_flag_get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32e50x_timer.o(.text.timer_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER6_IRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5_DAC_IRQHandler
</UL>

<P><STRONG><a name="[c8]"></a>timer_quadrature_decoder_mode_config</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, gd32e50x_timer.o(.text.timer_quadrature_decoder_mode_config))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderInInit
</UL>

<P><STRONG><a name="[cf]"></a>timer_slave_mode_select</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e50x_timer.o(.text.timer_slave_mode_select))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderInInit
</UL>

<P><STRONG><a name="[cc]"></a>timer_struct_para_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e50x_timer.o(.text.timer_struct_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderInInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimerTo100us
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimerTo10us
</UL>

<P><STRONG><a name="[f5]"></a>usart_baudrate_set</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, gd32e50x_usart.o(.text.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartAkip1148aInit
</UL>

<P><STRONG><a name="[f1]"></a>usart_data_receive</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32e50x_usart.o(.text.usart_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[f4]"></a>usart_deinit</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, gd32e50x_usart.o(.text.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartAkip1148aInit
</UL>

<P><STRONG><a name="[fd]"></a>usart_dma_receive_config</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gd32e50x_usart.o(.text.usart_dma_receive_config))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartAkip1148aInit
</UL>

<P><STRONG><a name="[e8]"></a>usart_dma_transmit_config</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gd32e50x_usart.o(.text.usart_dma_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrentAkip
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVoltageAkip
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParametr
</UL>

<P><STRONG><a name="[f8]"></a>usart_enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32e50x_usart.o(.text.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartAkip1148aInit
</UL>

<P><STRONG><a name="[fe]"></a>usart_interrupt_enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32e50x_usart.o(.text.usart_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartAkip1148aInit
</UL>

<P><STRONG><a name="[f0]"></a>usart_interrupt_flag_get</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32e50x_usart.o(.text.usart_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[f6]"></a>usart_receive_config</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gd32e50x_usart.o(.text.usart_receive_config))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartAkip1148aInit
</UL>

<P><STRONG><a name="[f7]"></a>usart_transmit_config</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gd32e50x_usart.o(.text.usart_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartAkip1148aInit
</UL>

<P><STRONG><a name="[112]"></a>usbSend</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, usbd_egurm.o(.text.usbSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usbSend &rArr; custom_hid_report_send &rArr; usbd_ep_send
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_hid_report_send
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[103]"></a>usb_gpio_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32e50x_usbd_hw.o(.text.usb_gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usb_gpio_config &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbdEgurmInit
</UL>

<P><STRONG><a name="[109]"></a>usbd_class_request</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbd_enum.o(.text.usbd_class_request))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_setup_transc
</UL>

<P><STRONG><a name="[10d]"></a>usbd_ep_recev</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usbd_core.o(.text.usbd_ep_recev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_ep_recev
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_hid_data_out
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_hid_init
</UL>

<P><STRONG><a name="[10a]"></a>usbd_ep_send</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, usbd_core.o(.text.usbd_ep_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_ep_send
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_hid_report_send
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_setup_transc
</UL>

<P><STRONG><a name="[100]"></a>usbd_init</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, usbd_core.o(.text.usbd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_init &rArr; serial_string_get
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_string_get
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbdActive
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbdEgurmInit
</UL>

<P><STRONG><a name="[f2]"></a>usbd_isr</STRONG> (Thumb, 494 bytes, Stack size 40 bytes, usbd_lld_int.o(.text.usbd_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usbd_isr &rArr; usbd_ep_send
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_send
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LP_CAN0_RX0_IRQHandler
</UL>

<P><STRONG><a name="[107]"></a>usbd_standard_request</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_enum.o(.text.usbd_standard_request))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_setup_transc
</UL>

<P><STRONG><a name="[108]"></a>usbd_vendor_request</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_enum.o(.text.usbd_vendor_request))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_setup_transc
</UL>

<P><STRONG><a name="[87]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[14b]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[14c]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5]"></a>key_config</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, custom_hid_itf.o(.text.key_config))
<BR>[Address Reference Count : 1]<UL><LI> custom_hid_itf.o(.data.fop_handler)
</UL>
<P><STRONG><a name="[6]"></a>led_config</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, custom_hid_itf.o(.text.led_config))
<BR>[Address Reference Count : 1]<UL><LI> custom_hid_itf.o(.data.fop_handler)
</UL>
<P><STRONG><a name="[0]"></a>custom_hid_init</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, custom_hid_core.o(.text.custom_hid_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = custom_hid_init &rArr; usbd_ep_recev
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_recev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_hid_core.o(.data.custom_hid_class)
</UL>
<P><STRONG><a name="[1]"></a>custom_hid_deinit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, custom_hid_core.o(.text.custom_hid_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = custom_hid_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_hid_core.o(.data.custom_hid_class)
</UL>
<P><STRONG><a name="[2]"></a>custom_hid_req_handler</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, custom_hid_core.o(.text.custom_hid_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = custom_hid_req_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_hid_core.o(.data.custom_hid_class)
</UL>
<P><STRONG><a name="[3]"></a>custom_hid_data_in</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, custom_hid_core.o(.text.custom_hid_data_in))
<BR>[Address Reference Count : 1]<UL><LI> custom_hid_core.o(.data.custom_hid_class)
</UL>
<P><STRONG><a name="[4]"></a>custom_hid_data_out</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, custom_hid_core.o(.text.custom_hid_data_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = custom_hid_data_out &rArr; usbd_ep_recev
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_recev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_hid_core.o(.data.custom_hid_class)
</UL>
<P><STRONG><a name="[75]"></a>_usb_std_getstatus</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, usbd_enum.o(.text._usb_std_getstatus))
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.text.usbd_standard_request)
</UL>
<P><STRONG><a name="[76]"></a>_usb_std_clearfeature</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, usbd_enum.o(.text._usb_std_clearfeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _usb_std_clearfeature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.text.usbd_standard_request)
</UL>
<P><STRONG><a name="[77]"></a>_usb_std_reserved</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_enum.o(.text._usb_std_reserved))
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.text.usbd_standard_request)
</UL>
<P><STRONG><a name="[78]"></a>_usb_std_setfeature</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, usbd_enum.o(.text._usb_std_setfeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _usb_std_setfeature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.text.usbd_standard_request)
</UL>
<P><STRONG><a name="[79]"></a>_usb_std_setaddress</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbd_enum.o(.text._usb_std_setaddress))
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.text.usbd_standard_request)
</UL>
<P><STRONG><a name="[7a]"></a>_usb_std_getdescriptor</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, usbd_enum.o(.text._usb_std_getdescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _usb_std_getdescriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.text.usbd_standard_request)
</UL>
<P><STRONG><a name="[7b]"></a>_usb_std_setdescriptor</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_enum.o(.text._usb_std_setdescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.text.usbd_standard_request)
</UL>
<P><STRONG><a name="[7c]"></a>_usb_std_getconfiguration</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, usbd_enum.o(.text._usb_std_getconfiguration))
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.text.usbd_standard_request)
</UL>
<P><STRONG><a name="[7d]"></a>_usb_std_setconfiguration</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, usbd_enum.o(.text._usb_std_setconfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _usb_std_setconfiguration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.text.usbd_standard_request)
</UL>
<P><STRONG><a name="[7e]"></a>_usb_std_getinterface</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbd_enum.o(.text._usb_std_getinterface))
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.text.usbd_standard_request)
</UL>
<P><STRONG><a name="[7f]"></a>_usb_std_setinterface</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbd_enum.o(.text._usb_std_setinterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _usb_std_setinterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.text.usbd_standard_request)
</UL>
<P><STRONG><a name="[80]"></a>_usb_std_synchframe</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_enum.o(.text._usb_std_synchframe))
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.text.usbd_standard_request)
</UL>
<P><STRONG><a name="[7]"></a>usbd_core_reset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbd_lld_core.o(.text.usbd_core_reset))
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[8]"></a>usbd_core_stop</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbd_lld_core.o(.text.usbd_core_stop))
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[9]"></a>usbd_dp_pullup</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbd_lld_core.o(.text.usbd_dp_pullup))
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[a]"></a>usbd_address_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_lld_core.o(.text.usbd_address_set))
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[b]"></a>usbd_suspend</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_lld_core.o(.text.usbd_suspend))
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[c]"></a>usbd_leave_suspend</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbd_lld_core.o(.text.usbd_leave_suspend))
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[d]"></a>usbd_resume</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usbd_lld_core.o(.text.usbd_resume))
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[e]"></a>usbd_ep_reset</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, usbd_lld_core.o(.text.usbd_ep_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_ep_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[f]"></a>usbd_ep_setup</STRONG> (Thumb, 388 bytes, Stack size 20 bytes, usbd_lld_core.o(.text.usbd_ep_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usbd_ep_setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[10]"></a>usbd_ep_disable</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, usbd_lld_core.o(.text.usbd_ep_disable))
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[11]"></a>usbd_ep_rx_enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbd_lld_core.o(.text.usbd_ep_rx_enable))
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[12]"></a>usbd_ep_data_write</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, usbd_lld_core.o(.text.usbd_ep_data_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_ep_data_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[13]"></a>usbd_ep_data_read</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, usbd_lld_core.o(.text.usbd_ep_data_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_ep_data_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[14]"></a>usbd_ep_stall_set</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, usbd_lld_core.o(.text.usbd_ep_stall_set))
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[15]"></a>usbd_ep_stall_clear</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, usbd_lld_core.o(.text.usbd_ep_stall_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_ep_stall_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[16]"></a>usbd_ep_status</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usbd_lld_core.o(.text.usbd_ep_status))
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[70]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
